Implement keyboard leds state reporting.

This patch intoduce new keyboard handling function kbd_get_leds_state(), which
returns bitmask of KDB_LED_*. Any frontend can use it for example to sync Caps
Lock state, currently the only user is stubdom Qubes GUI Agent.
Backend code for that done only in PS/2 and USB-HID emulated keyboards.
Index: xen-4.1.1/tools/qemu-xen-traditional/console.h
===================================================================
--- xen-4.1.1/tools/qemu-xen-traditional.orig/console.h
+++ xen-4.1.1/tools/qemu-xen-traditional/console.h
@@ -9,11 +9,16 @@
 #define MOUSE_EVENT_RBUTTON 0x02
 #define MOUSE_EVENT_MBUTTON 0x04
 
+#define KDB_LED_NUM_LOCK 0x01
+#define KDB_LED_CAPS_LOCK 0x02
+#define KDB_LED_SCROLL_LOCK 0x04
+
 /* in ms */
 #define GUI_REFRESH_INTERVAL 30
 
 typedef void QEMUPutKBDEvent(void *opaque, int keycode);
 typedef void QEMUPutMouseEvent(void *opaque, int dx, int dy, int dz, int buttons_state);
+typedef int QEMUGetLedsState(void *opaque);
 
 typedef struct QEMUPutMouseEntry {
     QEMUPutMouseEvent *qemu_put_mouse_event;
@@ -26,12 +31,14 @@ typedef struct QEMUPutMouseEntry {
 } QEMUPutMouseEntry;
 
 void qemu_add_kbd_event_handler(QEMUPutKBDEvent *func, void *opaque);
+void qemu_add_kbd_leds_handler(QEMUGetLedsState *func, void *opaque);
 QEMUPutMouseEntry *qemu_add_mouse_event_handler(QEMUPutMouseEvent *func,
                                                 void *opaque, int absolute,
                                                 const char *name);
 void qemu_remove_mouse_event_handler(QEMUPutMouseEntry *entry);
 
 void kbd_put_keycode(int keycode);
+int kbd_get_leds_state(void);
 void kbd_mouse_event(int dx, int dy, int dz, int buttons_state);
 int kbd_mouse_is_absolute(void);
 
Index: xen-4.1.1/tools/qemu-xen-traditional/hw/ps2.c
===================================================================
--- xen-4.1.1/tools/qemu-xen-traditional.orig/hw/ps2.c
+++ xen-4.1.1/tools/qemu-xen-traditional/hw/ps2.c
@@ -92,6 +92,7 @@ typedef struct {
        not the keyboard controller.  */
     int translate;
     int scancode_set; /* 1=XT, 2=AT, 3=PS/2 */
+    int leds;
 } PS2KbdState;
 
 typedef struct {
@@ -153,6 +154,13 @@ static void ps2_put_keycode(void *opaque
     ps2_queue(&s->common, keycode);
 }
 
+static int ps2_get_leds(void *opaque)
+{
+    PS2KbdState *s = opaque;
+
+    return s->leds;
+}
+
 uint32_t ps2_read_data(void *opaque)
 {
     PS2State *s = (PS2State *)opaque;
@@ -185,6 +193,7 @@ static void ps2_reset_keyboard(PS2KbdSta
 {
     s->scan_enabled = 1;
     s->scancode_set = 2;
+    s->leds = 0;
 }
 
 void ps2_write_keyboard(void *opaque, int val)
@@ -259,6 +268,20 @@ void ps2_write_keyboard(void *opaque, in
         s->common.write_cmd = -1;
         break;
     case KBD_CMD_SET_LEDS:
+        /* PS2 codes:
+         * 0x01: Scroll Lock LED
+         * 0x02: Num Lock LED
+         * 0x04: Caps Lock LED
+         *
+         * Store as (same as USB HID):
+         * 0x01: Num Lock LED
+         * 0x02: Caps Lock LED
+         * 0x04: Scroll Lock LED
+         * 0x08: Compose LED
+         * 0x10: Kana LED */
+        s->leds = ((val & 0x01) ? 0x04 : 0x00) |
+            ((val & 0x02) ? 0x01 : 0x00) |
+            ((val & 0x04) ? 0x02 : 0x00);
         ps2_queue(&s->common, KBD_REPLY_ACK);
         s->common.write_cmd = -1;
         break;
@@ -593,6 +616,7 @@ void *ps2_kbd_init(void (*update_irq)(vo
     ps2_reset(&s->common);
     register_savevm("ps2kbd", 0, 3, ps2_kbd_save, ps2_kbd_load, s);
     qemu_add_kbd_event_handler(ps2_put_keycode, s);
+    qemu_add_kbd_leds_handler(ps2_get_leds, s);
     qemu_register_reset(ps2_reset, &s->common);
     return s;
 }
Index: xen-4.1.1/tools/qemu-xen-traditional/hw/usb-hid.c
===================================================================
--- xen-4.1.1/tools/qemu-xen-traditional.orig/hw/usb-hid.c
+++ xen-4.1.1/tools/qemu-xen-traditional/hw/usb-hid.c
@@ -529,6 +529,13 @@ static void usb_keyboard_event(void *opa
     }
 }
 
+static int usb_keyboard_leds_state(void *opaque)
+{
+    USBHIDState *hs = opaque;
+    USBKeyboardState *s = &hs->kbd;
+    return s->leds;
+}
+
 static inline int int_clamp(int val, int vmin, int vmax)
 {
     if (val < vmin)
@@ -672,6 +679,7 @@ static void usb_keyboard_handle_reset(US
     USBHIDState *s = (USBHIDState *)dev;
 
     qemu_add_kbd_event_handler(usb_keyboard_event, s);
+    qemu_add_kbd_leds_handler(usb_keyboard_leds_state, s);
     s->protocol = 1;
 }
 
Index: xen-4.1.1/tools/qemu-xen-traditional/vl.c
===================================================================
--- xen-4.1.1/tools/qemu-xen-traditional.orig/vl.c
+++ xen-4.1.1/tools/qemu-xen-traditional/vl.c
@@ -550,6 +550,8 @@ ram_addr_t qemu_balloon_status(void)
 
 static QEMUPutKBDEvent *qemu_put_kbd_event;
 static void *qemu_put_kbd_event_opaque;
+static QEMUGetLedsState *qemu_kbd_get_leds;
+static void *qemu_kbd_get_leds_opaque;
 static QEMUPutMouseEntry *qemu_put_mouse_event_head;
 static QEMUPutMouseEntry *qemu_put_mouse_event_current;
 
@@ -559,6 +561,12 @@ void qemu_add_kbd_event_handler(QEMUPutK
     qemu_put_kbd_event = func;
 }
 
+void qemu_add_kbd_leds_handler(QEMUGetLedsState *func, void *opaque)
+{
+    qemu_kbd_get_leds_opaque = opaque;
+    qemu_kbd_get_leds = func;
+}
+
 QEMUPutMouseEntry *qemu_add_mouse_event_handler(QEMUPutMouseEvent *func,
                                                 void *opaque, int absolute,
                                                 const char *name)
@@ -628,6 +636,14 @@ void kbd_put_keycode(int keycode)
     }
 }
 
+int kbd_get_leds_state(void)
+{
+    if (qemu_kbd_get_leds) {
+        return qemu_kbd_get_leds(qemu_kbd_get_leds_opaque);
+    }
+    return 0;
+}
+
 void kbd_mouse_event(int dx, int dy, int dz, int buttons_state)
 {
     QEMUPutMouseEvent *mouse_event;

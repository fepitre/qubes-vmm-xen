QEMU pass-through.c expects the low bits of the PCT BAR addresses to be set
so it can distinguish between different types of BARs (MMIO, PIO, etc).
The result is that all BARs, including PIO BARs, get treated as MMIO BARs.
This does not work well for PIO BARs.

Don't mask out these bits in MiniOS to fix this.

Signed-off-by: Eric Shelton <eshelton@pobox.com>

--- a/stubdom/pciutils.patch	2016-10-27 00:36:52.457265294 -0400
+++ b/stubdom/pciutils.patch	2016-10-27 00:41:11.664265294 -0400
@@ -200,7 +200,7 @@
 -		d->base_addr[i] = x;
 -	      else
 +                {
-+                  d->base_addr[i] = x & PCI_BASE_ADDRESS_IO_MASK;
++                  d->base_addr[i] = x;
 +                  if (flags & PCI_FILL_SIZES)
 +                    {
 +                      u32 size;
@@ -214,7 +214,7 @@
  		  if ((x & PCI_BASE_ADDRESS_MEM_TYPE_MASK) != PCI_BASE_ADDRESS_MEM_TYPE_64)
 -		    d->base_addr[i] = x;
 +                    {
-+                      d->base_addr[i] = x & PCI_BASE_ADDRESS_MEM_MASK;
++                      d->base_addr[i] = x;
 +                      if (flags & PCI_FILL_SIZES)
 +                        {
 +                          u32 size;
@@ -231,7 +231,7 @@
  		      u32 y = pci_read_long(d, PCI_BASE_ADDRESS_0 + (++i)*4);
  #ifdef PCI_HAVE_64BIT_ADDRESS
 -		      d->base_addr[i-1] = x | (((pciaddr_t) y) << 32);
-+		      d->base_addr[i-1] = (x | (((pciaddr_t) y) << 32)) & PCI_BASE_ADDRESS_MEM_MASK;
++		      d->base_addr[i-1] = (x | (((pciaddr_t) y) << 32));
 +                      if (flags & PCI_FILL_SIZES)
 +                        {
 +                          u32 size;
@@ -248,7 +248,7 @@
  		      else
 -			d->base_addr[i-1] = x;
 +                        {
-+                          d->base_addr[i-1] = x & PCI_BASE_ADDRESS_MEM_MASK;
++                          d->base_addr[i-1] = x;
 +                          if (flags & PCI_FILL_SIZES)
 +                            {
 +                              u32 size;

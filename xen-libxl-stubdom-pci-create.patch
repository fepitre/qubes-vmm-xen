Index: xen-hvm/tools/libxl/libxl_create.c
===================================================================
--- xen-hvm.orig/tools/libxl/libxl_create.c
+++ xen-hvm/tools/libxl/libxl_create.c
@@ -409,7 +409,7 @@ static int do_domain_create(libxl_ctx *c
     libxl__device_model_starting *dm_starting = 0;
     libxl_device_model_info *dm_info = &d_config->dm_info;
     libxl_domain_build_state state;
-    uint32_t domid;
+    uint32_t domid, pcibackdomid;
     int i, ret;
 
     domid = 0;
@@ -540,12 +540,19 @@ static int do_domain_create(libxl_ctx *c
 
     for (i = 0; i < d_config->num_pcidevs; i++)
         libxl__device_pci_add(ctx, domid, &d_config->pcidevs[i], 1);
-    ret = libxl_create_pci_backend(&gc, domid, d_config->pcidevs, d_config->num_pcidevs);
+    pcibackdomid = libxl_get_stubdom_id(ctx, domid);
+    if (!pcibackdomid)
+        pcibackdomid = domid;
+    ret = libxl_create_pci_backend(&gc, pcibackdomid, d_config->pcidevs, d_config->num_pcidevs);
     if (ret < 0) {
         fprintf(stderr,"xl: fatal error: %s:%d, rc=%d: libxl_create_pci_backend\n",
                 __FILE__,__LINE__, ret);
         goto error_out;
     }
+    if (d_config->c_info.hvm) {
+        for (i = 0; i < d_config->num_pcidevs; i++)
+            libxl__pci_notify_device_model(&gc, domid, &d_config->pcidevs[i]);
+    }
 
     if ( cb && (d_config->c_info.hvm || d_config->b_info.u.pv.bootloader )) {
         if ( (*cb)(ctx, domid, priv) )
Index: xen-hvm/tools/libxl/libxl_pci.c
===================================================================
--- xen-hvm.orig/tools/libxl/libxl_pci.c
+++ xen-hvm/tools/libxl/libxl_pci.c
@@ -612,40 +612,54 @@ static int pci_ins_check(libxl_ctx *ctx,
     return 1;
 }
  
-static int do_pci_add(libxl__gc *gc, uint32_t domid, libxl_device_pci *pcidev, int starting)
+int libxl__pci_notify_device_model(libxl__gc *gc, uint32_t domid, libxl_device_pci *pcidev)
 {
     libxl_ctx *ctx = libxl__gc_owner(gc);
     char *path;
     char *state, *vdevfn;
+    int rc;
+
+	if (libxl__wait_for_device_model(ctx, domid, "running", NULL, NULL) < 0) {
+		return ERROR_FAIL;
+	}
+	path = libxl__sprintf(gc, "/local/domain/0/device-model/%d/state", domid);
+	state = libxl__xs_read(gc, XBT_NULL, path);
+	path = libxl__sprintf(gc, "/local/domain/0/device-model/%d/parameter", domid);
+	if (pcidev->vdevfn)
+		libxl__xs_write(gc, XBT_NULL, path, PCI_BDF_VDEVFN, pcidev->domain,
+					   pcidev->bus, pcidev->dev, pcidev->func, pcidev->vdevfn);
+	else
+		libxl__xs_write(gc, XBT_NULL, path, PCI_BDF, pcidev->domain,
+					   pcidev->bus, pcidev->dev, pcidev->func);
+	path = libxl__sprintf(gc, "/local/domain/0/device-model/%d/command", domid);
+	xs_write(ctx->xsh, XBT_NULL, path, "pci-ins", strlen("pci-ins"));
+	rc = libxl__wait_for_device_model(ctx, domid, NULL, pci_ins_check, state);
+	path = libxl__sprintf(gc, "/local/domain/0/device-model/%d/parameter", domid);
+	vdevfn = libxl__xs_read(gc, XBT_NULL, path);
+	path = libxl__sprintf(gc, "/local/domain/0/device-model/%d/state", domid);
+	if ( rc < 0 )
+		LIBXL__LOG(ctx, LIBXL__LOG_ERROR, "qemu refused to add device: %s", vdevfn);
+	else if ( sscanf(vdevfn, "0x%x", &pcidev->vdevfn) != 1 )
+		rc = -1;
+	xs_write(ctx->xsh, XBT_NULL, path, state, strlen(state));
+	if ( rc )
+		return ERROR_FAIL;
+	else
+		return 0;
+}
+
+static int do_pci_add(libxl__gc *gc, uint32_t domid, libxl_device_pci *pcidev, int starting)
+{
+    libxl_ctx *ctx = libxl__gc_owner(gc);
     int rc, hvm;
 
     hvm = libxl__domain_is_hvm(ctx, domid);
     if (hvm) {
-        if (libxl__wait_for_device_model(ctx, domid, "running", NULL, NULL) < 0) {
-            return ERROR_FAIL;
-        }
-        path = libxl__sprintf(gc, "/local/domain/0/device-model/%d/state", domid);
-        state = libxl__xs_read(gc, XBT_NULL, path);
-        path = libxl__sprintf(gc, "/local/domain/0/device-model/%d/parameter", domid);
-        if (pcidev->vdevfn)
-            libxl__xs_write(gc, XBT_NULL, path, PCI_BDF_VDEVFN, pcidev->domain,
-                           pcidev->bus, pcidev->dev, pcidev->func, pcidev->vdevfn);
-        else
-            libxl__xs_write(gc, XBT_NULL, path, PCI_BDF, pcidev->domain,
-                           pcidev->bus, pcidev->dev, pcidev->func);
-        path = libxl__sprintf(gc, "/local/domain/0/device-model/%d/command", domid);
-        xs_write(ctx->xsh, XBT_NULL, path, "pci-ins", strlen("pci-ins"));
-        rc = libxl__wait_for_device_model(ctx, domid, NULL, pci_ins_check, state);
-        path = libxl__sprintf(gc, "/local/domain/0/device-model/%d/parameter", domid);
-        vdevfn = libxl__xs_read(gc, XBT_NULL, path);
-        path = libxl__sprintf(gc, "/local/domain/0/device-model/%d/state", domid);
-        if ( rc < 0 )
-            LIBXL__LOG(ctx, LIBXL__LOG_ERROR, "qemu refused to add device: %s", vdevfn);
-        else if ( sscanf(vdevfn, "0x%x", &pcidev->vdevfn) != 1 )
-            rc = -1;
-        xs_write(ctx->xsh, XBT_NULL, path, state, strlen(state));
-        if ( rc )
-            return ERROR_FAIL;
+		if (!starting) {
+			rc = libxl__pci_notify_device_model(gc, domid, pcidev);
+			if ( rc )
+				return ERROR_FAIL;
+		}
     } else {
         char *sysfs_path = libxl__sprintf(gc, SYSFS_PCI_DEV"/"PCI_BDF"/resource", pcidev->domain,
                                          pcidev->bus, pcidev->dev, pcidev->func);
Index: xen-hvm/tools/libxl/libxl_internal.h
===================================================================
--- xen-hvm.orig/tools/libxl/libxl_internal.h
+++ xen-hvm/tools/libxl/libxl_internal.h
@@ -204,6 +204,7 @@ _hidden int libxl__wait_for_backend(libx
 
 _hidden int libxl__device_pci_add(libxl_ctx *ctx, uint32_t domid, libxl_device_pci *pcidev, int starting);
 _hidden int libxl_create_pci_backend(libxl__gc *gc, uint32_t domid, libxl_device_pci *pcidev, int num);
+_hidden int libxl__pci_notify_device_model(libxl__gc *gc, uint32_t domid, libxl_device_pci *pcidev);
 
 /* xl_exec */
 
